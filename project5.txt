Project Description
You are asked to re-implement Project #3 (Graph Processing) using Spark and Scala. Do not use Map-Reduce. That is, your program must find the connected components of any undirected graph and prints the size of these connected components. A connected component of a graph is a subgraph of the graph in which there is a path from any two vertices in the subgraph. Please look at Project #3 for an example.

An empty project5/src/main/scala/Graph.scala is provided, as well as scripts to build and run this code on Comet. You should modify Graph.scala only. Your main program should take the text file that contains the graph (small-graph.txt or large-graph.txt) as an argument.

The graph can be represented as RDD[ ( Long, Long, List[Long] ) ], where the first Long is the graph node ID, the second Long is the group that this vertex belongs to (initially, equal to the node ID), and the List[Long] is the adjacent list (the IDs of the neighbors). Here is the pseudo-code:

var graph = /* read the graph from args(0); the group of a graph node is set to the node ID */

for (i <- 1 to 5)
   graph = graph.flatMap{ /* associate each adjacent neighbor with the node group number + the node itself with its group number*/ }
                .reduceByKey( /* get the min group of each node */ )
                .join( /* join with the original graph */ )
                .map{ /* reconstruct the graph topology */ }

/* finally, print the group sizes */
For example, for the node (20,6,List(22,23,24)), the flatMap must return the sequence Seq((20,6),(22,6),(23,6),(24,6)). The output (group sizes) must be sent to the output, not to a file.
You can compile Graph.scala using:

run graph.build
and you can run it in local mode over the small graph using:
sbatch graph.local.run
Your result should be the same as the solution in the Project #3 example. You should modify and run your programs in local mode until you get the correct result. After you make sure that your program runs correctly in local mode, you run it in distributed mode using:
sbatch graph.distr.run
This will work on the moderate-sized graph and will print the results to the output. It should be the same as large-solution.txt.